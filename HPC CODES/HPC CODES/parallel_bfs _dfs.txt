#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

using namespace std;

// Graph class representing an undirected graph
class Graph {
    int numVertices;
    vector<vector<int>> adjList;

public:
    Graph(int vertices) : numVertices(vertices), adjList(vertices) {}

    // Function to add an edge between two vertices
    void addEdge(int src, int dest) {
        adjList[src].push_back(dest);
        adjList[dest].push_back(src);
    }

    // Breadth First Search algorithm
    void BFS(int startVertex) {
        vector<bool> visited(numVertices, false);
        queue<int> bfsQueue;

        visited[startVertex] = true;
        bfsQueue.push(startVertex);

        while (!bfsQueue.empty()) {
            int currentVertex = bfsQueue.front();
            bfsQueue.pop();

            cout << currentVertex << " ";

            #pragma omp parallel for
            for (int neighbor : adjList[currentVertex]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    bfsQueue.push(neighbor);
                }
            }
        }
    }

    // Depth First Search algorithm
    void DFS(int startVertex) {
        vector<bool> visited(numVertices, false);
        DFSUtil(startVertex, visited);
    }

private:
    // Recursive utility function for DFS
    void DFSUtil(int vertex, vector<bool>& visited) {
        visited[vertex] = true;
        cout << vertex << " ";

        #pragma omp parallel for
        for (int neighbor : adjList[vertex]) {
            if (!visited[neighbor]) {
                DFSUtil(neighbor, visited);
            }
        }
    }
};

int main() {
    int numVertices, numEdges;
    int startVertex;

    cout << "Enter the number of vertices in the graph: ";
    cin >> numVertices;
    cout << "Enter the number of edges in the graph: ";
    cin >> numEdges;

    Graph graph(numVertices);

    cout << "Enter the edges in the graph (format: source destination):" << endl;
    for (int i = 0; i < numEdges; i++) {
        int src, dest;
        cin >> src >> dest;
        graph.addEdge(src, dest);
    }

    cout << "Enter the starting vertex for BFS: ";
    cin >> startVertex;
    cout << "BFS traversal: ";
    graph.BFS(startVertex);
    cout << endl;

    cout << "Enter the starting vertex for DFS: ";
    cin >> startVertex;
    cout << "DFS traversal: ";
    graph.DFS(startVertex);
    cout << endl;

    return 0;
}

/*
g++ -fopenmp parallel_bfs_dfs -o parallel_bfs_dfs

//input
Enter the number of vertices in the graph: 7
Enter the number of edges in the graph: 6
Enter the edges in the graph (format: source destination):
0 1
0 2
1 3
1 4
2 5
2 6
Enter the starting vertex for BFS: 0
BFS traversal: 0 1 2 3 4 5 6
Enter the starting vertex for DFS: 0
DFS traversal: 0 1 3 4 2 5 6


//Graph:
Graph:
  0 -- 1 -- 3
  |    |
  2 -- 4
  |    |
  5    6
*/